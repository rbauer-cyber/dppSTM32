//$file${.::terminalDpp.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: dpp.qm
// File:  ${.::terminalDpp.cpp}
//
// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                    Q u a n t u m  L e a P s
//                    ------------------------
//                    Modern Embedded Software
//
// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
//
// The QP/C++ software is dual-licensed under the terms of the open-source
// GNU General Public License (GPL) or under the terms of one of the closed-
// source Quantum Leaps commercial licenses.
//
// Redistributions in source code must retain this top-level comment block.
// Plagiarizing this software to sidestep the license obligations is illegal.
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::terminalDpp.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"             // QP/C++ real-time embedded framework
#include "dpp.hpp"               // DPP Application interface
#include "terminal.hpp"          // Base class for TerminalDpp
#include "bsp.hpp"               // Board Support Package

//$declare${AOs::TerminalDpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${AOs::TerminalDpp} ........................................................
class TerminalDpp : public APP::Terminal {
public:
    static TerminalDpp inst;
    int m_defined;

public:
    TerminalDpp();
    void DispatchCommand(char command) override;
}; // class TerminalDpp

} // namespace APP
//$enddecl${AOs::TerminalDpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//----------------------------------------------------------------------------
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Shared::AO_TerminalDpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${Shared::AO_TerminalDpp} ..................................................
QP::QActive * const AO_TerminalDpp = &TerminalDpp::inst;

} // namespace APP
//$enddef${Shared::AO_TerminalDpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AOs::TerminalDpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${AOs::TerminalDpp} ........................................................
TerminalDpp TerminalDpp::inst;

//${AOs::TerminalDpp::TerminalDpp} ...........................................
TerminalDpp::TerminalDpp()
  : m_defined(1)
{}

//${AOs::TerminalDpp::DispatchCommand} .......................................
void TerminalDpp::DispatchCommand(char command) {
    if ( command == 'p' )
    {
        TableEvt *pe = Q_NEW(TableEvt, PAUSE_SIG);
        pe->philoId = 0;
        AO_Table->POST(pe, this);
    }
    else if ( command == 's' )
    {
        TableEvt *pe = Q_NEW(TableEvt, SERVE_SIG);
        pe->philoId = 0;
        AO_Table->POST(pe, this);
    }
}

} // namespace APP
//$enddef${AOs::TerminalDpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
